// Code generated by protoc-gen-go.
// source: RpcPayloadHeader.proto
// DO NOT EDIT!

package RpcPayloadHeader

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type RpcKindProto int32

const (
	RpcKindProto_RPC_BUILTIN         RpcKindProto = 0
	RpcKindProto_RPC_WRITABLE        RpcKindProto = 1
	RpcKindProto_RPC_PROTOCOL_BUFFER RpcKindProto = 2
)

var RpcKindProto_name = map[int32]string{
	0: "RPC_BUILTIN",
	1: "RPC_WRITABLE",
	2: "RPC_PROTOCOL_BUFFER",
}
var RpcKindProto_value = map[string]int32{
	"RPC_BUILTIN":         0,
	"RPC_WRITABLE":        1,
	"RPC_PROTOCOL_BUFFER": 2,
}

func (x RpcKindProto) Enum() *RpcKindProto {
	p := new(RpcKindProto)
	*p = x
	return p
}
func (x RpcKindProto) String() string {
	return proto.EnumName(RpcKindProto_name, int32(x))
}
func (x *RpcKindProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpcKindProto_value, data, "RpcKindProto")
	if err != nil {
		return err
	}
	*x = RpcKindProto(value)
	return nil
}

type RpcPayloadOperationProto int32

const (
	RpcPayloadOperationProto_RPC_FINAL_PAYLOAD        RpcPayloadOperationProto = 0
	RpcPayloadOperationProto_RPC_CONTINUATION_PAYLOAD RpcPayloadOperationProto = 1
	RpcPayloadOperationProto_RPC_CLOSE_CONNECTION     RpcPayloadOperationProto = 2
)

var RpcPayloadOperationProto_name = map[int32]string{
	0: "RPC_FINAL_PAYLOAD",
	1: "RPC_CONTINUATION_PAYLOAD",
	2: "RPC_CLOSE_CONNECTION",
}
var RpcPayloadOperationProto_value = map[string]int32{
	"RPC_FINAL_PAYLOAD":        0,
	"RPC_CONTINUATION_PAYLOAD": 1,
	"RPC_CLOSE_CONNECTION":     2,
}

func (x RpcPayloadOperationProto) Enum() *RpcPayloadOperationProto {
	p := new(RpcPayloadOperationProto)
	*p = x
	return p
}
func (x RpcPayloadOperationProto) String() string {
	return proto.EnumName(RpcPayloadOperationProto_name, int32(x))
}
func (x *RpcPayloadOperationProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpcPayloadOperationProto_value, data, "RpcPayloadOperationProto")
	if err != nil {
		return err
	}
	*x = RpcPayloadOperationProto(value)
	return nil
}

type RpcStatusProto int32

const (
	RpcStatusProto_SUCCESS RpcStatusProto = 0
	RpcStatusProto_ERROR   RpcStatusProto = 1
	RpcStatusProto_FATAL   RpcStatusProto = 2
)

var RpcStatusProto_name = map[int32]string{
	0: "SUCCESS",
	1: "ERROR",
	2: "FATAL",
}
var RpcStatusProto_value = map[string]int32{
	"SUCCESS": 0,
	"ERROR":   1,
	"FATAL":   2,
}

func (x RpcStatusProto) Enum() *RpcStatusProto {
	p := new(RpcStatusProto)
	*p = x
	return p
}
func (x RpcStatusProto) String() string {
	return proto.EnumName(RpcStatusProto_name, int32(x))
}
func (x *RpcStatusProto) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpcStatusProto_value, data, "RpcStatusProto")
	if err != nil {
		return err
	}
	*x = RpcStatusProto(value)
	return nil
}

type RpcPayloadHeaderProto struct {
	RpcKind          *RpcKindProto             `protobuf:"varint,1,opt,name=rpcKind,enum=RpcKindProto" json:"rpcKind,omitempty"`
	RpcOp            *RpcPayloadOperationProto `protobuf:"varint,2,opt,name=rpcOp,enum=RpcPayloadOperationProto" json:"rpcOp,omitempty"`
	CallId           *uint32                   `protobuf:"varint,3,req,name=callId" json:"callId,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *RpcPayloadHeaderProto) Reset()         { *m = RpcPayloadHeaderProto{} }
func (m *RpcPayloadHeaderProto) String() string { return proto.CompactTextString(m) }
func (*RpcPayloadHeaderProto) ProtoMessage()    {}

func (m *RpcPayloadHeaderProto) GetRpcKind() RpcKindProto {
	if m != nil && m.RpcKind != nil {
		return *m.RpcKind
	}
	return RpcKindProto_RPC_BUILTIN
}

func (m *RpcPayloadHeaderProto) GetRpcOp() RpcPayloadOperationProto {
	if m != nil && m.RpcOp != nil {
		return *m.RpcOp
	}
	return RpcPayloadOperationProto_RPC_FINAL_PAYLOAD
}

func (m *RpcPayloadHeaderProto) GetCallId() uint32 {
	if m != nil && m.CallId != nil {
		return *m.CallId
	}
	return 0
}

type RpcResponseHeaderProto struct {
	CallId              *uint32         `protobuf:"varint,1,req,name=callId" json:"callId,omitempty"`
	Status              *RpcStatusProto `protobuf:"varint,2,req,name=status,enum=RpcStatusProto" json:"status,omitempty"`
	ServerIpcVersionNum *uint32         `protobuf:"varint,3,opt,name=serverIpcVersionNum" json:"serverIpcVersionNum,omitempty"`
	XXX_unrecognized    []byte          `json:"-"`
}

func (m *RpcResponseHeaderProto) Reset()         { *m = RpcResponseHeaderProto{} }
func (m *RpcResponseHeaderProto) String() string { return proto.CompactTextString(m) }
func (*RpcResponseHeaderProto) ProtoMessage()    {}

func (m *RpcResponseHeaderProto) GetCallId() uint32 {
	if m != nil && m.CallId != nil {
		return *m.CallId
	}
	return 0
}

func (m *RpcResponseHeaderProto) GetStatus() RpcStatusProto {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return RpcStatusProto_SUCCESS
}

func (m *RpcResponseHeaderProto) GetServerIpcVersionNum() uint32 {
	if m != nil && m.ServerIpcVersionNum != nil {
		return *m.ServerIpcVersionNum
	}
	return 0
}

func init() {
	proto.RegisterEnum("RpcKindProto", RpcKindProto_name, RpcKindProto_value)
	proto.RegisterEnum("RpcPayloadOperationProto", RpcPayloadOperationProto_name, RpcPayloadOperationProto_value)
	proto.RegisterEnum("RpcStatusProto", RpcStatusProto_name, RpcStatusProto_value)
}
